package xdev.db.db2.jdbc;

/*-
 * #%L
 * DB2
 * %%
 * Copyright (C) 2003 - 2022 XDEV Software
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */


import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.util.Date;
import java.util.Map;

import xdev.db.DBException;
import xdev.db.jdbc.JDBCConnection;


public class DB2JDBCConnection extends JDBCConnection<DB2JDBCDataSource, DB2Dbms>
{
	public DB2JDBCConnection(DB2JDBCDataSource dataSource)
	{
		super(dataSource);
	}
	
	
	@Override
	protected Connection establishConnection() throws DBException
	{
		Connection con = super.establishConnection();
		
		try
		{
			String schema = dataSource.getSchema();
			if(schema != null && schema.length() > 0 && !schema.equals(dataSource.getUserName()))
			{
				con.createStatement().execute("SET SCHEMA " + schema);
			}
		}
		catch(SQLException e)
		{
			throw new DBException(dataSource,e);
		}
		
		return con;
	}
	
	
	@Override
	public int getQueryRowCount(String select) throws DBException
	{
		StringBuilder sb = new StringBuilder();
		sb.append("SELECT COUNT(*) FROM (");
		sb.append(select);
		sb.append(")");
		
		try
		{
			ResultSet result = queryJDBC(sb.toString());
			try
			{
				result.next();
				int rowCount = result.getInt(1);
				return rowCount;
			}
			finally
			{
				result.close();
			}
		}
		catch(DBException e)
		{
			throw e;
		}
		catch(Exception e)
		{
			throw new DBException(dataSource,e);
		}
	}
	
	
	@Override
	public void createTable(String tableName, String primaryKey, Map<String, String> columnMap,
			boolean isAutoIncrement, Map<String, String> foreignKeys) throws Exception
	{
		Connection connection = super.getConnection();
		Statement statement = connection.createStatement();
		try
		{
			if(!checkIfTableExists(connection.createStatement(), tableName))
			{
				if(!columnMap.containsKey(primaryKey))
				{
					columnMap.put(primaryKey, "INTEGER"); //$NON-NLS-1$
				}
				
				StringBuffer createStatement = createStringBuffer(tableName, primaryKey, columnMap, isAutoIncrement);
				
				int i = 1;
				
				for(String keySet : columnMap.keySet())
				{
					if(!keySet.equals(primaryKey))
					{
						if(i < columnMap.size())
						{
							createStatement.append(keySet + " " + columnMap.get(keySet) + ","); //$NON-NLS-1$ //$NON-NLS-2$
							
						}
						else
						{
							createStatement.append(keySet + " " + columnMap.get(keySet) + ")"); //$NON-NLS-1$ //$NON-NLS-2$
							
						}
					}
					i++;
				}
				
				if(log.isDebugEnabled())
				{
					log.debug("SQL Statement to create a table: " + createStatement.toString()); //$NON-NLS-1$
				}
				
				statement.execute(createStatement.toString());
			}
		}
		catch(Exception e)
		{
			throw e;
		}
		finally
		{
			statement.close();
			connection.close();
		}
	}
	
	/**
	 * Creates the StringBuffer depending on whether the table is AutoIncrement or not
	 * @param tableName
	 * @param primaryKey
	 * @param columnMap
	 * @param isAutoIncrement
	 * @return
	 */
	private static StringBuffer createStringBuffer(
		String tableName,
		String primaryKey,
		Map<String, String> columnMap,
		boolean isAutoIncrement)
	{
		StringBuffer createStatement = null;
		
		if(isAutoIncrement)
		{
			createStatement = new StringBuffer(
				"CREATE TABLE " + tableName + "(" //$NON-NLS-1$ //$NON-NLS-2$
					+ primaryKey
					+ " " + columnMap.get(primaryKey) + " GENERATED BY Default AS IDENTITY(Start with 201, Increment by 1) PRIMARY KEY,"); //$NON-NLS-1$ //$NON-NLS-2$
		}
		else
		{
			createStatement = new StringBuffer("CREATE TABLE " + tableName + "(" //$NON-NLS-1$ //$NON-NLS-2$
				+ primaryKey + " " + columnMap.get(primaryKey) + ","); //$NON-NLS-1$ //$NON-NLS-2$
		}
		return createStatement;
	}
	
	private boolean checkIfTableExists(Statement statement, String tableName) throws Exception
	{
		
		String sql = "SELECT NAME FROM SYSIBM.SYSTABLES WHERE NAME='" + tableName + "'"; //$NON-NLS-1$ //$NON-NLS-2$
		
		ResultSet resultSet = null;
		try
		{
			statement.execute(sql);
			resultSet = statement.getResultSet();
		}
		catch(Exception e)
		{
			if(resultSet != null)
			{
				resultSet.close();
			}
			statement.close();
			throw e;
		}
		
		if(resultSet != null)
		{
			if(resultSet.next())
			{
				resultSet.close();
				statement.close();
				return true;
			}
			
			resultSet.close();
			
		}
		statement.close();
		return false;
	}
	
	
	@Override
	public Date getServerTime() throws DBException, ParseException
	{
		String selectTime = "SELECT current timestamp FROM sysibm.sysdummy1"; //$NON-NLS-1$
		return super.getServerTime(selectTime);
	}
	
}
